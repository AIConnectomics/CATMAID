Installation of the DJANGO backend
==================================

The Django backend is required to use the neuron catalog, the
WebGL 3D viewer and the cropping tool among others.

Make sure that you have the following packages installed::

  sudo apt-get install python-virtualenv libpq-dev python-dev \
    libxml2-dev libxslt1-dev libjpeg-dev libtiff-dev libgraphicsmagick++3 \
    libgraphicsmagick++1-dev libboost-python1.48.0 python-h5py libboost-python1.48-dev \
    graphicsmagick libapache2-mod-wsgi

  sudo apt-get build-dep python-numpy python-h5py graphicsmagick \
    libimage-exiftool-perl

You first need to create a Python virtualenv. We suggest to create it
within the django subfolder. In this directory, run::

   virtualenv --no-site-packages env

Then run::

   source env/bin/activate

... to activate the virtualenv environment. Now, we need to install a set of
Python packages. Due to a dependency problem, we install NumPy separately::

   pip install numpy==1.6.1

Then install the rest of the packages at the right versions (the pip-frozen file
is in the django subdirectory)::

   pip install -r pip-frozen

Here is the list of packages and version required::

    Django==1.4
    distribute==0.6.25
    django-devserver==0.3.1
    h5py==2.0.1
    psycopg2==2.4.1
    sqlparse==0.1.3
    wsgiref==0.1.2
    networkx==1.7
    pgmagick==0.5.1
    celery==2.4.6
    django-celery==2.4.2
    kombu==2.0.0
    django-kombu==0.9.4
    PyYAML==3.10
    python-dateutil==2.1
    django-guardian==1.0.4

*A note on the pgmagick module:* this is a wrapper for GraphicMagick (GM).
GM uses so-called delegates to support different file formats. Depending
of the presence of such a delegate a file format is supported or not. The
cropping tool uses GM through pgmagick and expects the libtiff and the
libjpeg delegates to be present. So make sure your GM installation
supports tiff (check e.g. with the help of "gm convert -list format").

Now, configure all the settings in the file *configuration.py.example* in the subfolder *django*
and copy the file to *configuration.py*. Then run::

    ./create_configuration.py

This script will print the information you need for your Apache configuration.
Try running the server locally, with::

  ./projects/mysite/manage.py runserver

... and visiting (you should see a Page not found site generated by Django)::

  http://localhost:8000/

If that works successfully, you can edit your Apache configuration using the output
from the *create_configuration.py* script. You find your Apache configuration in
*/etc/apache2/sites-enabled/000-default*.

Restart Apache::

    sudo /etc/init.d/apache2 restart

And then you should be able to test the setup by visiting::

    http://localhost/catmaid/dj/[project_id]

If you see an "Internal Server Error", make sure that you configured and
customized every file properly. You might also want to check the Apache log::

   sudo tail -f /var/log/apache2/error.log