TODO
* Benchmarks

* OPEN: too may neurons in Fragments. a folder for real fragments without single postsynaptic nodes
  * PROBLEM: create new postyn treenode, and the, continue tracing, would stay in the same group
  * 
* PROBLEM: dblick just somewhere to zoom in in all modes
  * why can not set ondblclick event handler to mouse catcher?
* check delete connector when active (probably need to deactivate as well): DONE
* copying sliders instead of moving them
  zoom-level scroll bar not visible with "move" or "select" tools.
  
* Rendering when zoomed into 100% is not limited to 400 nodes. Some
nodes get rendered and some don't. MMB-drag updates different subsets at
every repaint event.

...  On the performance issue - the queries were running a little
    slow (0.4 seconds to return the treenodes) but I've added
    indices on location.(x|y|z) in the treenode and connector
    tables, which brings that down to 0.06 seconds.  So the bulk
    of the time is on the client side.  I'd like to try
    switching to the most recent Raphael (1.5.2) from 1.4.7 to
    see if that improves the performance the client side
    performance.  Also we could just remove the invisible
    catcher elements, which would reduce hugely the number of
    DOM elements being created.  The syntax for creating indices
    on composite types is a bit odd:

      create index location_x_index on treenode (((location).x));
      create index location_y_index on treenode (((location).y));
      create index location_z_index on treenode (((location).z));

      create index connector_x_index on connector (((location).x));
      create index connector_y_index on connector (((location).y));
      create index connector_z_index on connector (((location).z));

    I'll do more profiling on the Javascript to try to get to
    the bottom of this.
    
DONE
* update schema.dia file: DONE
* add keyboard shortcuts (like F2, F3, F4 ...) for all the tools in the toolbar.
  --> added keybindings with 1,2,3,...
* context popup menu in the "Object Tree" doesn't go away when moving the mouse out of it, or when
  clicking elsewhere. One must click on one of its elements. -> only does not go away when clicking on the stack
* Tagging must be easier/faster: keyboard only. -> now, automatic focus on input
  field to start typing, automatic tag addition when entering seperator (,)
  store tags with Tab-Space (switch to save button end click), if required
  you can add another key that simulates a .click() event

BEAUTIFICATION
* arrowheads problem (zindex)
* drag treenodes updates connector path
* code-cleanup
* catmaid.org, tutorial, video
  * small tutorial with the key bindings and how tracing works
* remove beta from title?
* object tree background alignment in chrome
* splitter in toolbar

WISHLIST

* zoom in past 100%, on to 200% and 400% (MHL can work on this)
* in TrakEM2, pressing 'g' while over a node selects that object - in
  CATMAID it would be good if it selected the active node.
* once display is fast enough, display treelines in all modes - in
  general
* search box (regular expression across class instance names)
* somewhere that displays the world coordinates of the current mouse
  position
* homepage: "try it now": a test project with images and
segmentations were anybody can add text labels, and edit just about
anything. A cron job can reset it every hour or so, or each visitor is
given a copy of the segmentation data 


LATER
* security auditing, related to:
  - amazon mechanical turk test
  - user rights managment, registration
  - history/logfile of changes
* 3d view of a skeleton
* show connectivity graph from annotation domain
* integrate the window manager: CMW
* ontology work
  - import obo ontolgoy terms
  - use class_class for constraining
* export script to trackem
* new django-based back-end (MHL working on this)
* label an area by a close polyline, similar to labelme
  - add a areatreenode inheriting from treenode with array column
* OPEN: add connector table (id, x,y,z, presyn, postsyn, tags, lastmodified)

SECURITY CONCERNS
* problem of SQL injections in php where REQUEST variable is just used in the sql statements
* calling e.g. tracing methods programatically in firebug using the project variable
* php code execution protected only by if($pid) and if($uid)

DONE
* DONE: change confidence value (-> in table)
* DONE: active treenode in view, show its skeleton treenodes in datatable
* DONE: show treenodes from a given skeleton again (check again from object tree)
* DONE: splitting seems not to update the skeleton correctly
* DONE: add endnode types to treenode, was leaf node
* DONE: ctrl check for tagging
* DONE:colorcode active treenode in data table
  * also colorcoded root and leaf node
* DONE: delete active treenode problem (when new node added)
